UnoSynthSysex {
	// See https://github.com/mungewell/uno-synth-utils
	classvar <ampAttack = #[0x20,0x1D]; // 0,0 -> 1,127
	classvar <ampDecay = #[0x20,0x1E]; // 0,0 -> 1,127
	classvar <ampSustain = #[0x00,0x1F]; // 0 -> 127
	classvar <ampRelease = #[0x20,0x20]; // 0,0 -> 1,127
	classvar <arpeggiatorDirection = #[0x00,0x09]; // Const(b"\x00\x09"), "arp_direction" / Default(Midi1u(Byte), 0),         # CC 83
	//classvar <arpeggiatorOnOff = 82; // Not found
	classvar <arpeggiatorRange = #[0x00,0x0A]; // Const(b"\x00\x0A"), "arp_octaves"   / Default(Midi1u(Byte), 1),         # CC 84
	var <audioInputChannels = #[19];
	classvar <cutoff = #[0x20,0x14]; // 0,0 -> 3,127
	classvar <delayMix = #[0x00,0x08]; // 0 -> 127
	classvar <delayTime = #[0x00,0x07]; // 0 -> 127
	classvar <diveOnOff = 89; //
	classvar <diveRange = #[0x00,0x28]; // 0 -> 127
	classvar <drive = #[0x00,0x17]; // 0 -> 127
	classvar <envAmt = #[0x20,0x18]; // 0 -> [127,64], 10 ->  [127,74], 20 -> [127,84], 63 -> [127,127], 64 -> [0,0], 127 -> [0, 63]
	classvar <filterAttack = #[0x20,0x19]; // 0,0 -> 1,127
	classvar <filterDecay = #[0x20,0x1A]; // 0,0 -> 1,127
	classvar <filterSustain = #[0x00,0x1B]; // 0 -> 127
	classvar <filterRelease = #[0x20,0x1C]; // 0,0 -> 1,127
	classvar <filterCutoffKeytrack = #[0x00,0x43]; // 0 -> 127
	classvar <filterEnvToOsc1Pwm = #[0x00,0x2D]; // 0 -> 64 (thin, fat, thin), 10 -> 74, 20 -> 84, 30 -> 94, 50 -> 114, 60 -> 124, 63 -> 127 (no change), 64 -> 0, 84 -> 20, 104 -> 40, 124 -> 60, 127 -> 63 (fat, thin, fat)
	classvar <filterEnvToOsc2Pwm = #[0x00,0x2E]; // Same as above
	classvar <filterEnvToOsc1Wave = #[0x00,0x31]; // 0 -> 64 (pulse, tri, pulse), 10 -> 74, 20 -> 84, 30 -> 94, 50 -> 114, 60 -> 124, 63 -> 127 (no change), 64 -> 0, 84 -> 20, 104 -> 40, 124 -> 60, 127 -> 63 (tri, up, tri)
	classvar <filterEnvToOsc2Wave = #[0x00,0x32]; // Same as above
	classvar <filterMode = #[0x00,0x15]; // 0 = low pass, 1 = high pass, 2 = band pass
	classvar <glideTime = #[0x20,0x04]; // 0,0 -> 127,127
	classvar <lfoRate = #[0x20,0x22]; // // 0,0 -> 23,56, then 1 1 -> 127,127, 1 2 -> 127,126, 4d -> 127,125, 1 4 -> 127, 124, 8d -> 127,123, 4t -> 127,122, 1 8 -> 127,121, 16d -> 127,120, 8t -> 127,119, 16 -> 127,118, 16t -> 127,117
	classvar <lfoToFilterCutoff = #[0x20,0x24]; // 0,0 -> 1,127
	classvar <lfoToOsc1Pwm = #[0x00,0x2F]; // 0 -> 127
	classvar <lfoToOsc1Waveform = #[0x00,0x33]; // 0 -> 127
	classvar <lfoToOsc2Waveform = #[0x00,0x34]; // 0 -> 127
	classvar <lfoToOsc2Pwm = #[0x00,0x30]; // 0 -> 127
	classvar <lfoToPitch = #[0x20,0x23]; // Const(b"\x20\x23"), "lfo_to_pitch"  / Default(Midi2u(Short), 0),        # CC 68
	classvar <lfoToTremolo = #[0x00,0x25]; // Const(b"\x00\x25"), "tremolo_depth" / Default(Midi1u(Byte), 32),        # CC 70, on/off CC 79
	classvar <lfoToVibrato = #[0x00,0x26]; // Const(b"\x00\x26"), "vibrato_depth" / Default(Midi1u(Byte), 32),        # CC 72, on/off CC 77
	classvar <lfoToWah = #[0x00,0x27]; // Const(b"\x00\x27"), "wah_depth"     / Default(Midi1u(Byte), 32),        # CC 71, on/off CC 78
	classvar <lfoWave = #[0x00,0x21]; // Const(b"\x00\x21"), "lfo_wave"      / Default(Midi1u(Byte), 0),         # CC 66
	classvar <noiseLevel = #[0x00,0x13]; // Const(b"\x00\x13"), "noise_level"   / Default(Midi1u(Byte), 0),         # CC 14
	classvar <osc1Level = #[0x00,0x0F]; // Const(b"\x00\x0F"), "osc1_level"    / Default(Midi1u(Byte), 127),       # CC 12
	classvar <osc1Tune = #[0x20,0x0E]; // Const(b"\x20\x0E"), "osc1_tune"     / Default(Midi2s(Int16sb), 0),      # CC 17
	classvar <osc1Wave = #[0x20,0x0D]; // Const(b"\x20\x0D"), "osc1_wave"     / Default(Midi2u(Short), 0),        # CC 15
	classvar <osc2Level = #[0x00,0x12]; // Const(b"\x00\x12"), "osc2_level"    / Default(Midi1u(Byte), 0),         # CC 13
	classvar <osc2Tune = #[0x20,0x11]; // Const(b"\x20\x11"), "osc2_tune"     / Default(Midi2s(Int16sb), 0),      # CC 18
	classvar <osc2Wave = #[0x20,0x10]; // Const(b"\x20\x10"), "osc2_wave"     / Default(Midi2u(Short), 0),        # CC 16
	classvar <pitchBendRange = #[0x00,0x2B]; // Const(b"\x00\x2B"), "pitch_bend"    / Default(Midi1u(Byte), 32),        # CC 101
	classvar <resonance = #[0x00,0x16]; // Const(b"\x00\x16"), "filter_res"    / Default(Midi1u(Byte), 0),         # CC 21
	classvar <scoopOnOff = #[]; // See scoopRange
	classvar <scoopRange = #[0x00,0x29]; // Const(b"\x00\x29"), "scoop_amount"  / Default(Midi1u(Byte), 32),        # CC 92, on/off CC 91
	classvar <tremoloOnOff = #[]; // See lfoToTremolo
	classvar <velocityToVolume = #[0x00,0x39]; // Const(b"\x00\x39"), "vel_amp"       / Default(Midi1u(Byte), 127),       # CC 102
	classvar <velocityToFilterCutoff = #[0x00,0x3A]; // Const(b"\x00\x3A"), "vel_filter"    / Default(Midi1u(Byte), 0),         # CC 103
	classvar <velocityToFilterEnvAmt = #[0x00,0x3B]; // Const(b"\x00\x3B"), "vel_filter_env" / Default(Midi1u(Byte), 0),        # CC 104
	classvar <velocityToLfoRate = #[0x00,0x40]; // Const(b"\x00\x40"), "vel_to_lfo_rate" / Default(Midi1s(Int8sb), 0),     # CC 105
	classvar <vibratoOnOff = #[]; // See lfoToVibrato
	classvar <volume = 7; // Not found
	classvar <wahOnOff = 78; // See lfoToWah
}