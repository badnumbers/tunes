TITLE:: Synthesizer
summary:: A base class for other classes which describe a particular hardware synthesizer
categories:: External control
related:: Classes/Microvolt, Classes/OhCoast, Classes/Sh01a, Classes/Tb03, Classes/UnoSynth

DESCRIPTION::
A base class for other classes which describe a hardware synthesizer.

NOTE::
This class is not intended to be used directly, but instead is accessed via its subclasses such as LINK::Classes/Tb03:: and LINK::Classes/Sh01a::.
::

A key concept is the TELETYPE::patch::, which is a set of parameters describing a patch which is saved in memory.

The patch you are actively working with is called the TELETYPE::working patch::. At any point you can save the working patch by calling CODE::saveWorkingPatch::. You can then cycle between saved patches using by calling CODE::nextPatch:: or CODE::previousPatch::, which will overwrite the working patch with the saved patch.

You will first need to create a working patch by calling CODE::initialisePatch::, CODE::randomisePatch:: or CODE::recordMidiParameters::.


CLASSMETHODS::

METHOD:: describeWorkingPatch
Writes a description of the working patch to the post window including all parameter values.

For example, describing a TB-03 patch might result in output similar to the following:

TELETYPE::
TB-03 PATCH: Unnamed patch
Tuning: 64
Cutoff Freq: 126.0
Resonance: 119.0
Env Mod: 64
Decay: 70.0
Accent: 59.0
Overdrive: 17.0
Delay Time: 0
Delay Feedback: nil
::

METHOD:: initialisePatch
Creates or updates the working patch with default parameter values and sends it to the hardware synth.

ARGUMENT:: midiout
An instance of code::MIDIOut:: used for sending the patch parameters to the hardware synth.

METHOD:: listSavedPatches
Writes the names of saved patches to the post window.

METHOD:: modifyWorkingPatch
Updates the working patch by changing the value of one of its parameters. This changed value is sent to the hardware synth.

For example, the following code will change the CUTOFF FREQ parameter in the TB-03 to the maximum:

CODE::
Tb03.modifyWorkingPatch(d,Tb03.cutoffFreqCcNo,127);
::

ARGUMENT:: midiout
An instance of code::MIDIOut:: used for sending the changed parameters to the hardware synth.

ARGUMENT:: parameterNumber
The number of the parameter to change. For example, in the TB-03, the number of the CUTOFF FREQ CC is 74.

ARGUMENT:: parameterValue
The new value to change the parameter to.

METHOD:: nextPatch
Replaces the working patch with the next patch in the list and sends it to the hardware synth.

NOTE::
The current working patch will be lost permanently unless it had been saved previously.
::

ARGUMENT:: midiout
An instance of code::MIDIOut:: used for sending the patch parameters to the hardware synth.

METHOD:: previousPatch
Replaces the working patch with the previous patch in the list and sends it to the hardware synth.

NOTE::
The current working patch will be lost permanently unless it had been saved previously.
::

ARGUMENT:: midiout
An instance of code::MIDIOut:: used for sending the patch parameters to the hardware synth.

METHOD:: randomisePatch
Replaces the working patch with a randomly-generated one. In CODE::Synthesizer:: only a base method, intended for overriding, is provided. Unless overridden, this method simply validates its inputs.

ARGUMENT:: midiout
An instance of code::MIDIOut:: used for sending the random patch parameters to the hardware synth.

ARGUMENT:: patchType
The type of patch to generate.

METHOD:: saveWorkingPatch
Stores the working patch in memory to enable you to create other patches without losing this one. To save the patch permanently, call CODE::writeWorkingPatch():: and save the code written to the output window.

ARGUMENT:: patchname
The name to give the patch.

ARGUMENT:: writeToPostWindow
Whether the randomly generated values should be written to the post window. Defaults to teletype::false::.

METHOD:: recordMidiParameters
Creates the working patch if necessary and sets up a CODE::Mididef:: which records MIDI data from the hardware synth and uses it to overwrite parameters in the working patch. This means that changes to settings in the hardware synth (e.g. cutoff or resonance) are reflected in the working patch.

In order for this to work, these things must have been done:
NUMBEREDLIST::
## The MIDI output socket of the hardware synth must be physically connected to the MIDI interface using a cable.
## The MIDI output port of the MIDI interface must be virtually connected to SuperCollider's MIDI input port in JACK.
::

METHOD:: writeWorkingPatch
Writes code to the console window which can be run later to recreate the patch. This is how patches can be saved permanently.

For example, writing a TB-03 patch might result in output similar to the following:

CODE::
(
var patch = Tb03Patch();
patch.name = "Unnamed patch";
patch.kvps[74]=126.0;patch.kvps[104]=64;patch.kvps[12]=64;patch.kvps[71]=119.0;patch.kvps[16]=59.0;patch.kvps[18]=0;patch.kvps[75]=70.0;patch.kvps[17]=17.0;
Tb03.saveSpecificPatch(patch);
)
::

METHOD:: writeSavedPatches
Writes code to the console window which can be run later to recreate all the saved patches. This is how patches can be saved permanently.

See CODE::writeWorkingPatch:: for an example of the output.

PRIVATE::applyMidiParameterToPatch,chooseRandomValue,createBlankPatch,workingPatch,workingPatchIndices,generateRandomValue,getMidiParametersFromMididef,noSavedPatchesMessage,noWorkingPatchMessage,saveSpecificPatch,patches,prWritePatch,preparePatchDictionary,sendPatch,setWorkingPatch

EXAMPLES::

NOTE::
The following example is for the TB-03 synthesizer.
::

CODE::
/*
MIDIClient.init;
d = MIDIOut.newByName("Scarlett 18i8 USB", "Scarlett 18i8 USB MIDI 1").latency_(Server.default.latency);
*/

Tb03.listSavedPatches(); // There are no saved patches yet
Tb03.initialisePatch(d); // Set to default parameter values
Tb03.saveWorkingPatch("Default"); // Save first patch
Tb03.modifyWorkingPatch(d,Tb03.cutoffFreqCcNo,127); // Set the cutoff to maximum
Tb03.saveWorkingPatch("Default - modified"); // Save second patch
Tb03.randomisePatch(d,0); // Generate a random patch
Tb03.saveWorkingPatch("Random"); // Save third patch
Tb03.recordMidiParameters; // Hook up incoming MIDI and change the knobs on the TB-03 as desired
Tb03.saveWorkingPatch("Random - modified"); // Save fourth patch
Tb03.listSavedPatches(); // Shows four saved patches
Tb03.nextPatch(d); // Cycle between the saved patches - sound updates each time
Tb03.writeSavedPatches(); // Get code to save the four patches for later use
::