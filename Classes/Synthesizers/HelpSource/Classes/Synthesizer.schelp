TITLE:: Synthesizer
summary:: A base class for other classes which describe a particular hardware synthesizer
categories:: External control
related:: Classes/Microvolt, Classes/OhCoast, Classes/Sh01a, Classes/Tb03, Classes/UnoSynth

DESCRIPTION::
A base class for other classes which describe a hardware synthesizer.

NOTE::
This class is not intended to be used directly, but instead is accessed via its subclasses such as LINK::Classes/Tb03:: and LINK::Classes/Sh01a::.
::

A key concept is the Patch, which is a set of parameters describing a patch which is saved in memory.

The Patch you are actively working with is called the Working Patch. At any point you can save the Working Patch by calling CODE::saveWorkingPatch::. This stores the patch in an in-memory Patch Dictionary. You can then recall a saved Patch from the Patch Dictionary by name by calling using by calling CODE::loadPatch::, which will overwrite the Working Patch with the recalled saved Patch.

CLASSMETHODS::

METHOD:: new
Creates an instance of this LINK::Classes/Synthesizer::.

ARGUMENT:: midiout
An instance of CODE::MIDIOut:: to be used by the LINK::Classes/Synthesizer:: to send updates to the hardware synth.

PRIVATE::getDefaultVariableName,getGuiType,getTouchOscControlSurfaceType

INSTANCEMETHODS::

METHOD:: describeWorkingPatch
Writes a description of the Working Patch to the post window including all parameter values.

For example, describing a LINK::Classes/Tb03:: Patch might result in output similar to the following:

TELETYPE::
TB-03 PATCH: Unnamed patch
Tuning: 64
Cutoff Freq: 126.0
Resonance: 119.0
Env Mod: 64
Decay: 70.0
Accent: 59.0
Overdrive: 17.0
Delay Time: 0
Delay Feedback: 0
::

METHOD:: initialisePatch
Updates the Working Patch with default parameter values and sends it to the hardware synth.

METHOD:: listSavedPatches
Writes the names of saved Patches to the post window.

METHOD:: modifyWorkingPatch
Updates the Working Patch by changing the value of one of its parameters. This changed value is sent to the hardware synth.

For example, the following code will change the CUTOFF FREQ parameter in the LINK::Classes/Tb03:: to the maximum (and make the same change in the hardware synth itself):

CODE::
Tb03.modifyWorkingPatch(d,Tb03.cutoffFreqCcNo,127);
::

ARGUMENT:: parameterNumber
The number of the parameter to change. For example, in the TB-03, the number of the CUTOFF FREQ CC is 74.

ARGUMENT:: parameterValue
The new value to change the parameter to.

ARGUMENT:: actor
The origin of the update, and consequently the place the update will not be written to. For example, if the update was caused by turning a knob on the hardware synthesizer, specifying CODE::\hardware:: as this parameter would prevent the update being written back to the hardware synth again. You will usually not specify this parameter.

METHOD:: randomisePatch
Replaces the Working Patch with a randomly-generated one. In LINK::Classes/Synthesizer:: only a base method, intended for overriding, is provided. Unless overridden, this method simply validates its inputs.

ARGUMENT:: patchType
The type of Patch to generate. This isn't implemented yet; just provide CODE::0::.

METHOD:: recordMidiParameters
Sets up a CODE::Mididef:: which records MIDI data from the hardware synth and uses it to overwrite parameters in the Working Patch. This means that changes to settings in the hardware synth (e.g. cutoff or resonance) are reflected in the Working Patch.

In order for this to work, these things must have been done:
NUMBEREDLIST::
## The MIDI output socket of the hardware synth must be physically connected to the MIDI interface using a cable.
## The MIDI output port of the MIDI interface must be virtually connected to SuperCollider's MIDI input port in JACK or PipeWire.
::

METHOD:: registerTouchOscControlSurface
Creates an CODE::OSCdef:: for each parameter the Touch OSC control surface can modify (see CODE::getControlParameters:: in LINK::Classes/TouchOscControlSurface::). This OSCdef captures the OSC data from the control surface and uses it to update the Working Patch, and in turn sends the new parameter value to the hardware synth itself.

In order for this to work, these things must have been done:
NUMBEREDLIST::
## Touch OSC must be showing a suitable Layout for the LINK::Classes/Synthesizer::, with control URLs in the form STRONG::/controls/{parameter name}::, where STRONG::{parameter name}:: is the name of the corresponding property of the LINK::Classes/Synthesizer:: (e.g. CODE::cutoffFreqCcNo:: in LINK::Classes/Tb03::).
## Touch OSC must be configured with the IP address of the machine that SuperCollider is running on, as obtained by running a terminal command such as the following:
::

CODE::
hostname -I
::

METHOD:: saveWorkingPatch
Stores the Working Patch in the Patch Dictionary to enable you to create other Patches without losing this one. To save the Patch permanently, call CODE::writeWorkingPatch():: and save the code which was written to the output window.

ARGUMENT:: patchname
The name to give the patch.

METHOD:: writeWorkingPatch
Writes code to the console window which can be run later to recreate the Working Patch. This is how Patches can be saved permanently.

For example, writing a LINK::Classes/Tb03:: Patch might result in output similar to the following:

CODE::
(
var patch = Tb03Patch();
patch.name = "Unnamed patch";
patch.kvps[74]=126.0;patch.kvps[104]=64;patch.kvps[12]=64;patch.kvps[71]=119.0;patch.kvps[16]=59.0;patch.kvps[18]=0;patch.kvps[75]=70.0;patch.kvps[17]=17.0;
~tb03.setWorkingPatch(patch);
)
::

METHOD:: writeSavedPatches
Writes code to the console window which can be run later to recreate all the saved patches. This is how patches can be saved permanently.

See CODE::writeWorkingPatch:: for an example of the output.

PRIVATE::addUpdateAction,chooseRandomValue,generateRandomValue,getMidiParametersFromMididef,getSynthesizerName,prWritePatch,saveSpecificPatch,setWorkingPatch

EXAMPLES::

NOTE::
The following example is for the LINK::Classes/Tb03::.
::

CODE::
MIDIClient.init;
d = MIDIOut.newByName("Scarlett 18i8 USB", "Scarlett 18i8 USB MIDI 1").latency_(Server.default.latency);

~tb03 = Tb03(d);
~tb03.listSavedPatches(); // There are no saved patches yet
~tb03.initialisePatch(d); // Set to default parameter values
~tb03.saveWorkingPatch("Default"); // Save first patch
~tb03.modifyWorkingPatch(d,Tb03.cutoffFreqCcNo,127); // Set the cutoff to maximum
~tb03.saveWorkingPatch("Default - modified"); // Save second patch
~tb03.randomisePatch(d,0); // Generate a random patch
~tb03.saveWorkingPatch("Random"); // Save third patch
~tb03.recordMidiParameters; // Hook up incoming MIDI and change the knobs on the TB-03 as desired
~tb03.saveWorkingPatch("Random - modified"); // Save fourth patch
~tb03.listSavedPatches(); // Shows four saved patches
~tb03.nextPatch(d); // Cycle between the saved patches - sound updates each time
~tb03.writeSavedPatches(); // Get code to save the four patches for later use
::