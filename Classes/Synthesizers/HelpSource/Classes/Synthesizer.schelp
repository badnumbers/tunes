TITLE:: Synthesizer
SUMMARY:: A base class for other classes which describe a particular hardware synthesizer
CATEGORIES:: External Control
RELATED:: Classes/Microvolt, Classes/OhCoast, Classes/Sh01a, Classes/Tb03, Classes/UnoSynth

DESCRIPTION::
A base class for other classes which describe a hardware synthesizer.

NOTE::
This class is not intended to be used directly, but instead is accessed via its subclasses such as LINK::Classes/Tb03:: and LINK::Classes/Sh01a::.
::

A key concept is the CODE::Patch::, which is a set of parameters describing a patch which is saved in memory.

The CODE::Patch:: you are actively working with is called the STRONG:: Working Patch::. At any point you can save the STRONG:: Working Patch:: by calling LINK::#-saveWorkingPatch::. This stores the CODE::Patch:: in an in-memory STRONG::Patch Dictionary::. You can then recall a saved CODE::Patch:: from the STRONG::Patch Dictionary:: by name by calling LINK::#-loadPatch::, which will overwrite the STRONG::Working Patch:: with the recalled saved CODE::Patch::.

This class depends on the hardware synthesizer having been described in the STRONG::Configuration File::, specifically in the STRONG::HardwareSynthesizers:: section. See LINK::Classes/Config:: for more information on this.

CLASSMETHODS::

METHOD:: new
Creates an instance of LINK::Classes/Synthesizer::.

INSTANCEMETHODS::

METHOD:: addUpdateAction
Adds a function to be run when a particular parameter of the CODE::Synthesizer::'s STRONG::Working Patch:: is changed. This is intended to update something somewhere, for example the position of a LINK::Classes/Knob:: or a parameter of a hardware synthesizer.

The update action is triggered when LINK::#-modifyWorkingPatch:: is called to update that parameter of the STRONG::Working Patch::.

ARGUMENT:: destination
A LINK::Classes/Symbol:: denoting the destination of the update, i.e. what it is intended to change. Typical values would be:

DEFINITIONLIST::
## TELETYPE::\hardware::
|| A hardware synthesizer.
## EMPHASIS::(name of a GUI class)::
|| A SuperCollider GUI class used to control a synthesizer.
::

When LINK::#-modifyWorkingPatch:: is called, a CODE::source:: can be provided. If an update action is triggered, if the CODE::destination:: of the update action matches this CODE::source::, then the update action will not be run. This is to prevent, for example, the knob of a GUI being updated unnecessarily when it was the source of the parameter change, or a change physically made on a hardware synthesizer being fed back to it.

ARGUMENT:: parameterNumber
The parameter number that, when changed, will trigger the update action.

ARGUMENT:: action
A LINK::Classes/Function:: which will be run when the update action is triggered. When called, the function is passed the new value of the parameter as an argument.

DISCUSSION::
Say for example you are writing a GUI to control a hardware synthesizer. You might add a LINK::Classes/Knob:: to the GUI, and want that CODE::Knob:: to be updated automatically when parameter 99 of the CODE::Synthesizer::'s STRONG::Working Patch:: is updated. You might therefore write a call to CODE::addUpdateAction:: like this:
CODE::
synthesizer.addUpdateAction(\myGuiClass, 99, {
	|newvalue|
	knob.value = newvalue;
});
::

NOTE::
In reality, CODE::newvalue:: would probably need mapping to the CODE::Knob::'s 0 - 1 value range, but I'm keep the code simple.
::

As you have provided CODE::\myGuiClass:: as the update action's CODE::destination::, when the CODE::Knob:: is used to update the parameter it should provide CODE::\myGuiClass:: as the CODE::source::. This will prevent the CODE::Knob:: being updated by the update action, which is unecessary since the CODE::Knob:: is what caused the parameter update in the first place.

The CODE::Knob::'s code to update the parameter would look like this:

CODE::
synthesizer.modifyWorkingPatch(99, knob.value, \myGuiClass);
::

NOTE::
Again, you'd probably need to map the CODE::Knob::'s 0 - 1 value range to the range expected for the parameter.
::

METHOD:: describeWorkingPatch
Writes a description of the STRONG::Working Patch:: to the post window including all parameter values.

For example, describing a LINK::Classes/Tb03:: Patch might result in output similar to the following:

TELETYPE::
TB-03 PATCH: Unnamed patch
Tuning: 64
Cutoff Freq: 126.0
Resonance: 119.0
Env Mod: 64
Decay: 70.0
Accent: 59.0
Overdrive: 17.0
Delay Time: 0
Delay Feedback: 0
::

METHOD:: getWorkingPatchParameterValue
Gets the value of the supplied parameter of the STRONG::Working Patch::.

ARGUMENT:: parameterNumber
An LINK::Classes/Integer:: which is the number of the parameter to get the value of.

METHOD:: initialisePatch
Updates the STRONG::Working Patch:: with default parameter values and sends it to the hardware synth.

METHOD:: inputBusChannels
An LINK::Classes/Array:: of zero-based integers indicating the soundcard input ports that the hardware synthesizer is connected to.

This is read from the STRONG::Configuration File:: (see LINK::Classes/Config::).

METHOD:: listSavedPatches
Writes the names of saved CODE::Patches:: to the post window.

METHOD:: loadPatch
Loads the CODE::Patch:: with the specified name from the STRONG::Patch Dictionary:: into the STRONG::Working Patch::.

ARGUMENT:: patchname
A LINK::Classes/Symbol:: which is the name of the CODE::Patch:: to load.

METHOD:: midiChannels
An LINK::Classes/Array:: of zero-based integers indicating the MIDI channels that this Synthesizer is set to receive on. The CODE::Array:: typically only contains one value, but some hardware synthesizers, for example multitimbral ones, may have more than one.

This value is read from the STRONG::Configuration File::. See the LINK::Classes/Config:: class.

NOTE::
In the STRONG::Configuration File::, the MIDI channels are 1-based (i.e. they go from 1 to 16). However, when the STRONG::Configuration File:: is read, the MIDI channels become zero-based for compatbility with SuperCollider's MIDI classes.
::

METHOD:: midiChannel
This is the first value in the LINK::#-midiChannels:: array, provided for convenience. The assumption is that when a synthesizer receives MIDI on more than one channel, one of them should be treated as the default.

METHOD:: modifyWorkingPatch
Updates the STRONG::Working Patch:: by changing the value of one of its parameters. This changed value is sent to the hardware synth.

For example, the following code will change the CUTOFF FREQ parameter in the LINK::Classes/Tb03:: to the maximum (and make the same change in the hardware synth itself):

CODE::
Tb03.modifyWorkingPatch(d,Tb03.cutoffFreqCcNo,127);
::

ARGUMENT:: parameterNumber
The number of the parameter to change. For example, in the TB-03, the number of the CUTOFF FREQ CC is 74.

ARGUMENT:: parameterValue
The new value to change the parameter to.

ARGUMENT:: source
The source of the update, and consequently the place the update will not be written to. For example, if the update was caused by turning a knob on the hardware synthesizer, specifying CODE::\hardware:: as this parameter would prevent the update being written back to the hardware synth again. See LINK::#-addUpdateAction:: for a more detailed discussion of sources and destinations.

METHOD:: nrpn
Sends a non-registered parameter number (NRPN) message to the hardware synth.

ARGUMENT:: selectMsb
The most significant bit (MSB) to select the parameter to change.

ARGUMENT:: selectLsb
The least significant bit (LSB) to select the parameter to change.

ARGUMENT:: value
This can be either an LINK::Classes/Integer::, in which case its value is used, or an LINK::Classes/Array:: of two TELETYPE::Integers::, in which case the first is interpreted as the most significant bit (MSB) of the value to change to, and the second is interpreted as the least significant bit (LSB) of the value to change to.

DISCUSSION::
This code will set Filter 1 Cutoff to 0 on a Hydrasynth, assuming that the Hydrasynth's TELETYPE::Param RX:: setting is set to STRONG::NRPN:: in the System Setup:
CODE::
// ~hydrasynth = ~hydrasynth ?? Hydrasynth(Setup.midi); (if necessary)
~hydrasynth.nrpn(64,40,0);
::

METHOD:: programChange
Sends bank and program change messages to the hardware synth in order to change the current preset.

NOTE::
This changes between the presets EMPHASIS::stored on the synthesizer itself::, and is different from the patches that are maintained in this class.
::

ARGUMENT:: bankNumber
The number (1-based) of the bank to change to.

ARGUMENT:: programNumber
The number (1-based) of the preset to change to.

METHOD:: randomisePatch
Replaces the STRONG::Working Patch:: with a randomly-generated one. In CODE::Synthesizer:: only a base method, intended for overriding, is provided. Unless overridden, this method simply validates its inputs.

ARGUMENT:: patchType
The type of CODE::Patch:: to generate. This isn't implemented yet; just provide CODE::0::.

METHOD:: recordMidiParameters
Sets up a LINK::Classes/MIDIdef:: which records MIDI data from the hardware synth and uses it to overwrite parameters in the STRONG::Working Patch::. This means that changes to settings in the hardware synth (e.g. cutoff or resonance) are reflected in the STRONG::Working Patch::.

NOTE::
In order for this to work, these things must have been done:
NUMBEREDLIST::
## The MIDI output socket of the hardware synth must be physically connected to the MIDI interface using a cable.
## The MIDI output port of the MIDI interface must be virtually connected to SuperCollider's MIDI input port in JACK or PipeWire.
::
::

METHOD:: saveWorkingPatch
Stores the STRONG::Working Patch:: in the STRONG::Patch Dictionary:: to enable you to create other CODE::Patches:: without losing this one. To save the CODE::Patch:: permanently, call LINK::#-writeWorkingPatch:: and save the code which was written to the output window.

ARGUMENT:: patchname
The name to give the patch.

METHOD:: showGui
Opens the LINK::Classes/ScGuiControlSurface:: used to control this synthesizer.

METHOD:: updateParameterInHardwareSynth
Updates the parameter with the supplied parameter number to the supplied parameter value in the hardware synth. By default, this will be done using a CC, but the method can be overridden to do it using, for example, sysex.

ARGUMENT:: key
The number of the parameter to update.

ARGUMENT:: newvalue
The value to update to.

METHOD:: writeSavedPatches
Writes code to the console window which can be run later to recreate all the saved patches. This is how patches can be saved permanently.

See LINK::#-writeWorkingPatch:: for an example of the output.

METHOD:: writeUpdateActions
Writes all the update actions registered for this CODE::Synthesizer:: to the post window for help with debugging.

ARGUMENT:: destination
If not CODE::nil::, only update actions with this destination are written.

ARGUMENT:: parameterNumber
If not CODE::nil::, only update actions with this parameter number are written.

METHOD:: writeWorkingPatch
Writes code to the console window which can be run later to recreate the STRONG::Working Patch::. This is how CODE::Patches:: can be saved permanently.

For example, writing a LINK::Classes/Tb03:: CODE::Patch:: might result in output similar to the following:

CODE::
(
var patch = Tb03Patch();
patch.name = "Unnamed patch";
patch.kvps[74]=126.0;patch.kvps[104]=64;patch.kvps[12]=64;patch.kvps[71]=119.0;patch.kvps[16]=59.0;patch.kvps[18]=0;patch.kvps[75]=70.0;patch.kvps[17]=17.0;
~tb03.setWorkingPatch(patch);
)
::

PRIVATE::chooseRandomValue,generateRandomValue,getMidiParametersFromMididef,prWritePatch,saveSpecificPatch,setWorkingPatch

EXAMPLES::

NOTE::
The following example is for the LINK::Classes/Tb03::.
::

CODE::
(
Setup.server;
~tb03 = Tb03(Setup.midi);
)


~tb03.listSavedPatches; // There are no saved patches yet
~tb03.initialisePatch; // Set to default parameter values
~tb03.saveWorkingPatch("Default"); // Save first patch
~tb03.modifyWorkingPatch(Tb03.cutoffFreqCcNo,127); // Set the cutoff to maximum
~tb03.saveWorkingPatch("Default - modified"); // Save second patch
~tb03.randomisePatch(0); // Generate a random patch
~tb03.saveWorkingPatch("Random"); // Save third patch
~tb03.recordMidiParameters; // Hook up incoming MIDI and change the knobs on the TB-03 as desired
~tb03.saveWorkingPatch("Random - modified"); // Save fourth patch
~tb03.listSavedPatches; // Shows four saved patches
~tb03.loadPatch("Random"); // Go back to one of the previous patches
~tb03.writeSavedPatches; // Get code to save the four patches for later use
::