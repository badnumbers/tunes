TITLE:: ScGuiControlSurface
summary:: Base class for designing control surfaces for hardware synthesizers.
categories:: External Control
related:: Classes/Synthesizer

DESCRIPTION::
Base class for designing control surfaces for hardware synthesizers. Should not be used directly.

CLASSMETHODS::

METHOD:: new
Creates an instance of this LINK::Classes/ScGuiControlSurface::.

ARGUMENT:: synthesizer
An instance of a subclass of LINK::Classes/Synthesizer:: which enables control of the hardware synthesizer this control surface represents.

NOTE::
You shouldn't call this constructor directly in your code. Instead, the control surface should be created by calling LINK::Classes/Synthesizer#-showGui:: on an instance of LINK::Classes/Synthesizer::.::

INSTANCEMETHODS::

METHOD:: addControlLabel
Writes text to the window intended to label a control.

ARGUMENT:: parent
The LINK::Classes/View:: to which the label should be added.

ARGUMENT:: rect
A LINK::Classes/Rect:: describing the position and size of the label.

ARGUMENT:: labelText
The text of the label.

ARGUMENT:: alignment
The alignment of the text in the label. See LINK::Reference/gui_alignments:: for the possible values.

ARGUMENT:: textColour
A LINK::Classes/Color:: setting the colour of the text.

METHOD:: addDropDownList
Adds a knob to the drop-down list surface.

ARGUMENT:: parent
The LINK::Classes/View:: to which the drop-down list should be added.

ARGUMENT:: rect
A LINK::Classes/Rect:: describing the position and size of the drop-down list.

ARGUMENT:: parameterNumber
The parameter number of the parameter the drop-down list controls. Refer to the CODE::Patch:: for the hardware synthesizer you are controlling.

ARGUMENT:: midiMappings
An LINK::Classes/Array:: of Arrays describing the labels and underlying parameter values to be displayed in the drop down list.

This is an example of a CODE::midiMappings:: array, in this case describing whether an operator is Ratio or Fixed in a LINK::Classes/Dx7::.
CODE::
[ [ "Ratio", [0] ], [ "Fixed", [1] ] ]
::

ARGUMENT:: source
This allows the source configured for the drop-down list to be overridden. By default, the source used for all controls is the name of the GUI class (i.e. the subclass of this class). This means that changes originating from the GUI won't result in the GUI being updated. However, sometimes it is useful to have the same control or value shown in more than one place on the GUI. In order to have them able to update each other, they must specify a different source. That is when this argument would be provided.


METHOD:: addKnob
Adds a knob to the control surface.

ARGUMENT:: parent
The LINK::Classes/View:: to which the knob should be added.

ARGUMENT:: rect
A LINK::Classes/Rect:: describing the position and size of the knob.

ARGUMENT:: parameterNumber
The parameter number of the parameter the knob controls. Refer to the CODE::Patch:: for the hardware synthesizer you are controlling.

ARGUMENT:: centred
Whether the knob controls a bipolar parameter such as pan, as opposed to a unipolar parameter such as volume.

ARGUMENT:: mainKnobColour
A LINK::Classes/Color:: setting the main colour of the knob.

ARGUMENT:: valueIndicatorColour
A LINK::Classes/Color:: setting the colour of the line on the knob.

ARGUMENT:: deviationIndicatorColour
A LINK::Classes/Color:: setting the colour of the around the knob indicating how far it is turned clockwise.

ARGUMENT:: backgroundOfDeviationIndicatorColour
A LINK::Classes/Color:: setting the colour of the around the knob indicating much further it can be turned.

ARGUMENT:: controlSpec
A LINK::Classes/ControlSpec:: used to translate the knob values into the values of the underlying parameter and back again. Leave as CODE::nil:: to use the default control spec (see LINK::#-setDefaultControlSpec::).

ARGUMENT:: source
This allows the source configured for the drop-down list to be overridden. By default, the source used for all controls is the name of the GUI class (i.e. the subclass of this class). This means that changes originating from the GUI won't result in the GUI being updated. However, sometimes it is useful to have the same control or value shown in more than one place on the GUI. In order to have them able to update each other, they must specify a different source. That is when this argument would be provided.

METHOD:: addSectionLabel
Writes text to the window intended to label a section of controls.

ARGUMENT:: parent
The LINK::Classes/View:: to which the label should be added.

ARGUMENT:: rect
A LINK::Classes/Rect:: describing the position and size of the label.

ARGUMENT:: labelText
The text of the label.

ARGUMENT:: textColour
A LINK::Classes/Color:: setting the colour of the text.

ARGUMENT:: backgroundColour
A LINK::Classes/Color:: setting the background colour of the label.

ARGUMENT:: alignment
The alignment of the text in the label. See LINK::Reference/gui_alignments:: for the possible values.

METHOD:: addSlider
Adds a horizontal or vertical slider to the control surface.

ARGUMENT:: parent
The LINK::Classes/View:: to which the slider should be added.

ARGUMENT:: rect
An instance of LINK::Classes/Rect:: defining the position and size of the slider.

ARGUMENT:: parameterNumber
The parameter number of the parameter the slider controls. Refer to the CODE::Patch:: for the hardware synthesizer you are controlling.

ARGUMENT:: orientation
One of the values CODE::\horizontal:: or CODE::\vertical::.

METHOD:: addToggleButton
Adds a two-state button to the control surface.

ARGUMENT:: parent
The LINK::Classes/View:: to which the toggle button should be added.

ARGUMENT:: rect
A LINK::Classes/Rect:: describing the position and size of the toggle button.

ARGUMENT:: parameterNumber
The parameter number of the parameter the toggle button controls. Refer to the CODE::Patch:: for the hardware synthesizer you are controlling.

ARGUMENT:: midiMappings
An LINK::Classes/Array:: of two Arrays describing associations between the STRONG::on:: and STRONG::off:: states of the toggle button (CODE::true:: and CODE::false::) and the underlying parameter values, for example:
	CODE::
	[False, [0] ], [True, [1] ]
	::

ARGUMENT:: backgroundColour
A LINK::Classes/Color:: setting the background colour of the toggle button.

ARGUMENT:: borderColour
A LINK::Classes/Color:: setting the border colour of the toggle button.

ARGUMENT:: clickColour
A LINK::Classes/Color:: setting the colour of the toggle button while it is being clicked.

ARGUMENT:: offColour
A LINK::Classes/Color:: setting the colour of the toggle button when it is in the STRONG::off:: state.

ARGUMENT:: onColour
A LINK::Classes/Color:: setting the colour of the toggle button when it is in the STRONG::on:: state.

METHOD:: openStethoscope
Opens a scope (using LINK::Classes/Server#-scope::) showing the input from the hardware synthesizer's configured input bus channels. See LINK::Classes/Synthesizer#-inputBusChannels::.

METHOD:: setDefaultControlSpec
This method is called from the CODE::init:: method of CODE::ScGuiControlSurface::. Override it if you don't want your control surface to use controls which go from 0 to 127 linearly as the default.

PRIVATE:: init