TITLE:: Controller
summary:: Control playback of patterns.
categories:: Live Coding

DESCRIPTION::
Allows scheduled control of which patterns are currently playing.

CLASSMETHODS::

METHOD:: controlPattern
Gets a value pattern, to be used by the code::\type:: key of an event pattern, which allows the pattern to be controlled by code::Controller::.

ARGUMENT:: patternName
A code::Symbol:: which is the name of the pattern itself. See the code example at the bottom of this file.

ARGUMENT:: playingEventType
A code::Symbol:: describing the event type which should be used when the pattern is playing, for example code::\midi::, code::\note:: or code::monoSet::. The default is code::\midi::.

METHOD:: execute
Executes the supplied code::Function:: at the time specified by the code::quant:: argument.

ARGUMENT:: tempoClock
The code::TempoClock:: to schedule against.

ARGUMENT:: quant
The code::Quant:: describing when to execute the code::Function::. This can be supplied as a number, an code::Array:: or a code::Quant:::
table::
## Type || How it's used || Example parameter value || Resulting Quant
## Number || Used as the code::quant:: parameter of the resulting Quant || 4 || Quant(4, 0, 0)
## Array || Elements of the Array are used as the parameters of the resulting Quant || [4,-1,0] || Quant(4,-1,0)
## Quant || Used directly as the Quant || Quant(4,-1,0) || Quant(4,-1,0)
::

ARGUMENT:: func
The code::Function:: to run.

METHOD:: play
Starts playing the supplied patterns at a time specified by the supplied code::Quant::.

ARGUMENT:: tempoClock
The code::TempoClock:: to schedule against.

ARGUMENT:: startQuant
The code::Quant:: describing when to start playing the patterns. This can be supplied as a number, an code::Array:: or a code::Quant:::
table::
## Type || How it's used || Example parameter value || Resulting Quant
## Number || Used as the code::quant:: parameter of the resulting Quant || 4 || Quant(4, 0, 0)
## Array || Elements of the Array are used as the parameters of the resulting Quant || [4,-1,0] || Quant(4,-1,0)
## Quant || Used directly as the Quant || Quant(4,-1,0) || Quant(4,-1,0)
::
Specify code::nil:: to start playing the patterns immediately. The default value is code::nil::.

ARGUMENT:: patterns
A code::Symbol:: or an code::Array:: of code::Symbols:: designating the names of patterns (i.e. their key in the code::Pdef:: dictionary) to start playing.

ARGUMENT:: stopQuant
The code::Quant:: describing when to stop playing the patterns again. This can be supplied as a number, an code::Array:: or a code::Quant:::
table::
## Type || How it's used || Example parameter value || Resulting Quant
## Number || Used as the code::quant:: parameter of the resulting Quant || 4 || Quant(4, 0, 0)
## Array || Elements of the Array are used as the parameters of the resulting Quant || [4,-1,0] || Quant(4,-1,0)
## Quant || Used directly as the Quant || Quant(4,-1,0) || Quant(4,-1,0)
::
Specify code::nil:: to not schedule to stop playing the patterns again, i.e. to leave them playing until stopped by another command. The default is code::nil::.

METHOD:: stop
Stops playing the supplied patterns at a time specified by the supplied code::Quant::.

ARGUMENT:: tempoClock
The code::TempoClock:: to schedule against.

ARGUMENT:: startQuant
The code::Quant:: describing when to stop playing the patterns. This can be supplied as a number, an code::Array:: or a code::Quant:::
table::
## Type || How it's used || Example parameter value || Resulting Quant
## Number || Used as the code::quant:: parameter of the resulting Quant || 4 || Quant(4, 0, 0)
## Array || Elements of the Array are used as the parameters of the resulting Quant || [4,-1,0] || Quant(4,-1,0)
## Quant || Used directly as the Quant || Quant(4,-1,0) || Quant(4,-1,0)
::
Specify code::nil:: to stop playing the patterns immediately. The default value is code::nil::.

ARGUMENT:: patterns
A code::Symbol:: or an code::Array:: of code::Symbols:: designating the names of patterns (i.e. their key in the code::Pdef:: dictionary) to stop playing.

ARGUMENT:: stopQuant
The code::Quant:: describing when to start playing the patterns again. This can be supplied as a number, an code::Array:: or a code::Quant:::
table::
## Type || How it's used || Example parameter value || Resulting Quant
## Number || Used as the code::quant:: parameter of the resulting Quant || 4 || Quant(4, 0, 0)
## Array || Elements of the Array are used as the parameters of the resulting Quant || [4,-1,0] || Quant(4,-1,0)
## Quant || Used directly as the Quant || Quant(4,-1,0) || Quant(4,-1,0)
::
Specify code::nil:: to not schedule to start playing the patterns again, i.e. to leave them stopped until started by another command. The default is code::nil::.

INSTANCEMETHODS::


EXAMPLES::

code::
// Create and play two parallel patterns
// Note the reset of the TempoClock
(
Pdef(\part1,
	Pbind(
		\type,Controller.controlPattern(\part1,\note),
		\octave, 5,
		\degree, Pseq((0..7).mirror2,inf),
		\dur, 0.25
	)
);
Pdef(\part2,
	Pbind(
		\type,Controller.controlPattern(\part2,\note),
		\octave, 3,
		\degree, Pseq((0..7).mirror2,inf),
		\dur, 0.5
	)
);
TempoClock.default.beats = 0;
[\part1,\part2].do({|pat|Pdef(pat).play;});
)

// Immediately turn off the top part. It will beginning playing again at the start of the next 8-bar section.
Controller.stop(TempoClock.default,nil,\part1,8);

// When you can stand it no more
[\part1,\part2].do({|pat|Pdef(pat).stop;});
::